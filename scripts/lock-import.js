/* scripts/lock-import.js
   –î–æ–±–∞–≤–ª—è–µ—Ç:
   - üîí –†–µ–∂–∏–º –∑–∞–Ω—è—Ç–∏—è (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –§–∞–∫—Ç/RPE/–ó–∞–º–µ—Ç–∫–∞)
   - –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—Å—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö
   - –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ –ø–ª–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞
   –†–∞–±–æ—Ç–∞–µ—Ç –ø–æ–≤–µ—Ä—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ä–∞–∑–º–µ—Ç–∫–∏. –ù–∏—á–µ–≥–æ –≤ –¥—Ä—É–≥–∏—Ö —Ñ–∞–π–ª–∞—Ö –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ.
*/

(function () {
  const $  = (s, r=document) => r.querySelector(s);
  const $$ = (s, r=document) => Array.from(r.querySelectorAll(s));

  // ---- –í–°–¢–ê–í–ö–ê –ù–ï–û–ë–•–û–î–ò–ú–û–ì–û CSS ----
  (function injectCSS(){
    const css = `
    /* –ß–∏—Ç–∞–µ–º—ã–π –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π —Å–ª–æ–π –ø–æ–≤–µ—Ä—Ö –ø–æ–ª–µ–π */
    table[data-sec] td{ position: relative; vertical-align: top; }
    table[data-sec] td .cell-view{
      position:relative; display:block; width:100%;
      padding:10px 12px; border-radius:10px;
      background: var(--panel, #0f141d); border:1px solid #22314a;
      color:#dbe9ff; min-height:42px; line-height:1.35;
      white-space: normal; overflow-wrap: anywhere;
    }
    table[data-sec] td input, table[data-sec] td textarea{
      position:absolute; inset:0; width:100%; height:100%;
      background:transparent; border:0; color:transparent;
      caret-color:#dbe9ff;
    }
    table[data-sec] td textarea{ resize:none; }
    /* –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –ø–æ –≤—Å–µ–º readOnly –ø–æ–ª—è–º –≤ –∑–∞–º–∫–µ */
    table[data-sec].locked input[readonly],
    table[data-sec].locked textarea[readonly]{ pointer-events:none; }
    /* –ö–Ω–æ–ø–∫–∞ –∑–∞–º–∫–∞ + –ø–æ–¥–ø–∏—Å—å */
    #toggleLock.btn{ margin-left:8px; }
    .lockBadge{ font-size:12px; color:#7f9bbd; margin-left:8px; }
    `;
    const st = document.createElement('style');
    st.id = 'lock-import-style';
    st.textContent = css;
    document.head.appendChild(st);
  })();

  // ---- –û–ë–ï–°–ü–ï–ß–ò–í–ê–ï–ú data-sec –î–õ–Ø –¢–ê–ë–õ–ò–¶ ----
  (function ensureDataSec(){
    const map = {
      warmTable: 'warm',
      strengthTable: 'strength',
      hiitTable: 'hiit',
      coolTable: 'cool'
    };
    Object.entries(map).forEach(([id, sec])=>{
      const t = $('#'+id);
      if (t) t.setAttribute('data-sec', sec);
    });
  })();

  // ---- –ö–ù–û–ü–ö–ê –ó–ê–ú–ö–ê ----
  let workoutLocked = true;
  (function injectLockButton(){
    if ($('#toggleLock')) return;
    // –≤—Å—Ç–∞–≤–∏–º –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" –µ—Å–ª–∏ –Ω–∞–π–¥—ë–º
    const buttons = $$('button, .btn');
    let anchor = buttons.find(b => /–Ω–∞—Å—Ç—Ä–æ–π/i.test(b.textContent||''));
    anchor = anchor || $('.tabs') || $('header') || document.body;
    const wrap = anchor.parentElement || $('main') || document.body;

    const btn = document.createElement('button');
    btn.id = 'toggleLock';
    btn.className = 'btn';
    btn.textContent = 'üîí –†–µ–∂–∏–º –∑–∞–Ω—è—Ç–∏—è';

    const span = document.createElement('span');
    span.id = 'lockState';
    span.className = 'lockBadge';
    span.textContent = '(—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è: ¬´–§–∞–∫—Ç¬ª, ¬´RPE¬ª, ¬´–ó–∞–º–µ—Ç–∫–∞¬ª)';

    if (anchor && anchor.nextSibling) {
      wrap.insertBefore(btn, anchor.nextSibling);
      wrap.insertBefore(span, btn.nextSibling);
    } else {
      wrap.appendChild(btn);
      wrap.appendChild(span);
    }

    btn.addEventListener('click', ()=>{
      workoutLocked = !workoutLocked;
      btn.textContent = workoutLocked ? 'üîí –†–µ–∂–∏–º –∑–∞–Ω—è—Ç–∏—è' : 'üîì –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è';
      span.textContent = workoutLocked
        ? '(—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è: ¬´–§–∞–∫—Ç¬ª, ¬´RPE¬ª, ¬´–ó–∞–º–µ—Ç–∫–∞¬ª)'
        : '(–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –ø–ª–∞–Ω/—Ç–µ—Ö–Ω–∏–∫—É/–Ω–∞–∑–≤–∞–Ω–∏—è)';
      lockAll();
    });
  })();

  // ---- –û–ë–Å–†–¢–ö–ê –Ø–ß–ï–ï–ö ¬´–ü–†–û–°–ú–û–¢–† + –ü–û–õ–ï¬ª ----
  function wrapCell(td){
    if (!td) return;
    if (td.querySelector('.cell-view')) return;
    const field = td.querySelector('input,textarea');
    if (!field) return;
    const view = document.createElement('div');
    view.className = 'cell-view';
    view.textContent = field.value || '';
    td.prepend(view);

    if (field.tagName === 'TEXTAREA') autoResize(field);
    field.addEventListener('input', ()=>{
      view.textContent = field.value || '';
      if (field.tagName === 'TEXTAREA') autoResize(field);
    });
  }
  function autoResize(ta){
    ta.style.height = 'auto';
    ta.style.height = ta.scrollHeight + 'px';
  }
  function prepareRow(tr){
    $$('td', tr).forEach(wrapCell);
    lockRow(tr);
  }

  // ---- –õ–û–ì–ò–ö–ê –ó–ê–ú–ö–ê ----
  function lockRow(tr){
    const fields = $$('input,textarea', tr);
    fields.forEach(f=>{
      const ph = (f.getAttribute('placeholder')||'').toLowerCase();
      const label = (f.closest('td')?.dataset?.label||'').toLowerCase();
      const isFact  = ph.includes('—Ñ–∞–∫—Ç')   || label.includes('—Ñ–∞–∫—Ç');
      const isRpe   = ph.includes('rpe')    || label.includes('rpe');
      const isNote  = ph.includes('–∑–∞–º–µ—Ç')  || label.includes('–∑–∞–º–µ—Ç');
      const editable = (isFact || isRpe || isNote);
      f.readOnly = workoutLocked ? !editable : false;
    });
  }
  function lockAll(){
    ['warm','strength','hiit','cool'].forEach(sec=>{
      const t = document.querySelector(`table[data-sec="${sec}"]`);
      if (!t) return;
      t.classList.toggle('locked', !!workoutLocked);
      $$('tbody tr', t).forEach(lockRow);
    });
  }

  // ---- –ü–û–î–ì–û–¢–û–í–ö–ê –¢–ï–ö–£–©–ò–• –°–¢–†–û–ö ----
  function prepareAllExisting(){
    ['warm','strength','hiit','cool'].forEach(sec=>{
      const t = document.querySelector(`table[data-sec="${sec}"]`);
      if (!t) return;
      $$('tbody tr', t).forEach(prepareRow);
    });
    lockAll();
  }
  document.addEventListener('DOMContentLoaded', prepareAllExisting);
  window.addEventListener('load', prepareAllExisting);

  // –°–ª–µ–¥–∏–º –∑–∞ –ø–æ—è–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ (–∫–Ω–æ–ø–∫–∏ ¬´+ –î–æ–±–∞–≤–∏—Ç—å ‚Ä¶¬ª)
  const mo = new MutationObserver(muts=>{
    muts.forEach(m=>{
      m.addedNodes && m.addedNodes.forEach(n=>{
        if (n.nodeType===1 && n.matches && n.matches('tr')) prepareRow(n);
        if (n.nodeType===1) $$('tr', n).forEach(prepareRow);
      });
    });
  });
  mo.observe(document.body, {childList:true, subtree:true});

  // ---- –ë–´–°–¢–†–´–ô –í–í–û–î ----
  (function injectQuickIfMissing(){
    if ($('#bulkAdd')) return; // —É–∂–µ –µ—Å—Ç—å
    const box = document.createElement('details');
    box.innerHTML = `
      <summary>–ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ / –≤—Å—Ç–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –∏–∑ —á–∞—Ç–∞</summary>
      <textarea id="bulkAdd" rows="4"
        placeholder="–ë–ª–æ–∫–∏: –†–∞–∑–º–∏–Ω–∫–∞:, –°–∏–ª–æ–≤–∞—è:, –í—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤:, –ó–∞–º–∏–Ω–∫–∞:. –°—Ç—Ä–æ–∫–∏: –ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –º—ã—à—Ü—ã ‚Äî –ø–ª–∞–Ω ‚Äî tip:—Ç–µ—Ö–Ω–∏–∫–∞ ‚Äî note:–∑–∞–º–µ—Ç–∫–∞"></textarea>
      <div class="row" style="justify-content:flex-end;margin-top:8px">
        <button class="btn" id="bulkAddBtn">–†–∞–∑–æ–±—Ä–∞—Ç—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å</button>
      </div>`;
    // –≤—Å—Ç–∞–≤–∏–º –ø–µ—Ä–µ–¥ —Ç–∞–±–ª–∏—Ü–µ–π ¬´–†–∞–∑–º–∏–Ω–∫–∞¬ª –∏–ª–∏ –≤ –Ω–∞—á–∞–ª–æ main
    const warm = $('#warmTable');
    if (warm && warm.parentElement) warm.parentElement.insertBefore(box, warm);
    else $('main')?.prepend(box);
  })();

  function clickAddFor(sec){
    const btn = document.querySelector(`button[data-add="${sec}"]`);
    if (btn) btn.click();
  }
  function lastRowOf(sec){
    const t = document.querySelector(`table[data-sec="${sec}"] tbody`);
    if (!t) return null;
    const trs = $$('tr', t);
    return trs[trs.length-1] || null;
  }
  function setCellValue(tr, colIndex, value){
    const td = $$('td', tr)[colIndex];
    if (!td) return;
    const field = $('input,textarea', td);
    if (!field) return;
    field.value = value || '';
    field.dispatchEvent(new Event('input', {bubbles:true}));
  }

  // –ü–∞—Ä—Å–µ—Ä —Å—Ç—Ä–æ–∫ –ø–ª–∞–Ω–∞
  function importFromQuick(text){
    const lines = text.split(/\r?\n/).map(s=>s.trim()).filter(Boolean);
    let sec = 'strength';
    const mapSec = {
      '—Ä–∞–∑–º–∏–Ω–∫–∞':'warm',
      '—Å–∏–ª–æ–≤–∞—è':'strength',
      '–≤—ã—Å–æ–∫–æ–∏–Ω—Ç–µ–Ω—Å–∏–≤':'hiit',
      '–∑–∞–º–∏–Ω–∫–∞':'cool'
    };

    lines.forEach(raw=>{
      const l = raw.toLowerCase().replace(/\s*:\s*$/,'');
      if (mapSec[l]) { sec = mapSec[l]; return; }

      // ¬´–ù–∞–∑–≤–∞–Ω–∏–µ ‚Äî –º—ã—à—Ü—ã ‚Äî –ø–ª–∞–Ω ‚Äî tip:—Ç–µ—Ö–Ω–∏–∫–∞ ‚Äî note:–∑–∞–º–µ—Ç–∫–∞¬ª
      const obj = { name:'', muscles:'', plan:'', tip:'', note:'' };
      // –≤—ã–¥–µ–ª–∏–º tip/note –∏–∑ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –º–µ—Å—Ç–∞
      const tipM  = raw.match(/tip:([^‚Äî]+)/i);  if (tipM)  obj.tip  = tipM[1].trim();
      const noteM = raw.match(/note:([^‚Äî]+)/i); if (noteM) obj.note = noteM[1].trim();

      // —É–±–µ—Ä—ë–º –∏—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏ –∏ —Ä–∞–∑—Ä–µ–∂–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
      const base = raw.replace(/tip:[^‚Äî]+/ig,'').replace(/note:[^‚Äî]+/ig,'');
      const parts = base.split('‚Äî').map(s=>s.trim()).filter(Boolean);
      obj.name    = parts[0] || '';
      obj.muscles = parts[1] || '';
      obj.plan    = parts[2] || '';

      // —Å–æ–∑–¥–∞—ë–º —Å—Ç—Ä–æ–∫—É —à—Ç–∞—Ç–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π + –∑–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
      clickAddFor(sec);
      const tr = lastRowOf(sec);
      if (!tr) return;
      setCellValue(tr, 0, obj.name);       // –ù–∞–∑–≤–∞–Ω–∏–µ
      setCellValue(tr, 1, obj.muscles);    // –ú—ã—à—Ü—ã
      setCellValue(tr, 2, obj.plan);       // –ü–ª–∞–Ω
      setCellValue(tr, 5, obj.tip);        // –¢–µ—Ö–Ω–∏–∫–∞
      setCellValue(tr, 6, obj.note);       // –ó–∞–º–µ—Ç–∫–∞
      // ¬´–§–∞–∫—Ç¬ª –∏ ¬´RPE¬ª –∑–∞–ø–æ–ª–Ω—è–µ—à—å —É–∂–µ –ø–æ —Ö–æ–¥—É –∑–∞–Ω—è—Ç–∏—è
    });

    // –≤–∫–ª—é—á–∞–µ–º –∑–∞–º–æ–∫ –ø–æ—Å–ª–µ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    workoutLocked = true;
    const btn = $('#toggleLock'), span = $('#lockState');
    if (btn) btn.textContent = 'üîí –†–µ–∂–∏–º –∑–∞–Ω—è—Ç–∏—è';
    if (span) span.textContent = '(—Ä–µ–¥–∞–∫—Ç–∏—Ä—É—é—Ç—Å—è: ¬´–§–∞–∫—Ç¬ª, ¬´RPE¬ª, ¬´–ó–∞–º–µ—Ç–∫–∞¬ª)';
    lockAll();
  }

  document.addEventListener('click', (e)=>{
    if (e.target && e.target.id === 'bulkAddBtn'){
      const ta = $('#bulkAdd');
      if (ta && ta.value.trim()) importFromQuick(ta.value);
    }
  });

})();
